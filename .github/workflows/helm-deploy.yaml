name: Deploy to AKS
on:
  push:
    branches: feat/3-tier-app

env:
  AKS_CLUSTER_NAME: dev-aks
  AKS_RESOURCE_GROUP: dev-gtest
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  FRONTEND_IMAGE_NAME: frontend
  BACKEND_IMAGE_NAME: backend
  DOCKER_IMAGE_TAG: 1.0.0
  RELEASE_NAME: three-tier-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build, tag, and push frontend image
      run: |
        FRONTEND_IMAGE_FULL_IDENTIFIER=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
        echo "FRONTEND_IMAGE_FULL_IDENTIFIER=${FRONTEND_IMAGE_FULL_IDENTIFIER}" >> $GITHUB_ENV
        
        # Build the frontend image
        docker build -f ./application/frontend/Dockerfile -t $FRONTEND_IMAGE_FULL_IDENTIFIER ./application/frontend
        
        # Push the frontend image
        docker push $FRONTEND_IMAGE_FULL_IDENTIFIER

    - name: Build, tag, and push backend image
      run: |
        BACKEND_IMAGE_FULL_IDENTIFIER=${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
        echo "BACKEND_IMAGE_FULL_IDENTIFIER=${BACKEND_IMAGE_FULL_IDENTIFIER}" >> $GITHUB_ENV
        
        # Build the backend image
        docker build -f ./application/backend/Dockerfile -t $BACKEND_IMAGE_FULL_IDENTIFIER ./application/backend
        
        # Push the backend image
        docker push $BACKEND_IMAGE_FULL_IDENTIFIER

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group dev-gtest --name dev-aks --overwrite-existing

    # - name: Set AKS context
    #   uses: azure/aks-set-context@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}
    #     resource-group: ${{ env.AKS_RESOURCE_GROUP }}
    #     cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    - name: Ensure namespace exists with release name
      run: |
        kubectl create namespace ${{ env.RELEASE_NAME }} || echo "Namespace ${{ env.RELEASE_NAME }} already exists"  # Create namespace with release name

    - name: Package Helm Chart
      run: |
        helm package ./helm
        echo "HELM_PACKAGE=$(ls three-tier-app-*.tgz)" >> $GITHUB_ENV


    # - name: Get Ingress IP
    #   run: |
    #     EXTERNAL_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    #     echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV

    - name: Debug environment variables
      run: |
        echo "Release Name: ${{ env.RELEASE_NAME }}"
        echo "Helm Package: ${{ env.HELM_PACKAGE }}"
    
    

    - name: Deploy to AKS
      run: |
        echo "Deploying Helm chart..."
        helm upgrade --install ${{ env.RELEASE_NAME }} /home/runner/work/aks-3tier-app/aks-3tier-app/three-tier-app-1.1.0.tgz \
          --namespace ${{ env.RELEASE_NAME }} \
          --set ingress.serviceIP=${{ env.EXTERNAL_IP }}



